package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"text/template"
)

type DynamoSchema struct {
	TableName        string           `json:"table_name"`
	HashKey          string           `json:"hash_key"`
	RangeKey         string           `json:"range_key"`
	Attributes       []Attribute      `json:"attributes"`
	SecondaryIndexes []SecondaryIndex `json:"secondary_indexes"`
}

type Attribute struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type SecondaryIndex struct {
	Name             string   `json:"name"`
	HashKey          string   `json:"hash_key"`
	RangeKey         string   `json:"range_key"`
	ProjectionType   string   `json:"projection_type"`
	NonKeyAttributes []string `json:"non_key_attributes,omitempty"`
}

const codeTemplate = `
// Code generated by dynamo_dictionary_table.go. DO NOT EDIT.

package data

import (
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
)

const (
	TableName = "{{.TableName}}"

	{{range .SecondaryIndexes}}
	Index{{.Name}} = "{{.Name}}"
	{{- end}}
)

var (
	AttributeNames = []string{
		{{- range .Attributes}}
		"{{.Name}}",
		{{- end}}
	}

	IndexProjections = map[string][]string{
		{{- range .SecondaryIndexes}}
		Index{{.Name}}: {
			{{- if eq .ProjectionType "ALL"}}
			{{- range $.Attributes}}
			"{{.Name}}",
			{{- end}}
			{{- else}}
			"{{.HashKey}}", "{{.RangeKey}}",
			{{- range .NonKeyAttributes}}
			"{{.}}",
			{{- end}}
			{{- end}}
		},
		{{- end}}
	}
)

type DynamoSchema struct {
	TableName        string
	HashKey          string
	RangeKey         string
	Attributes       []Attribute
	SecondaryIndexes []SecondaryIndex
}

type Attribute struct {
	Name string
	Type string
}

type SecondaryIndex struct {
	Name              string
	HashKey           string
	RangeKey          string
	ProjectionType    string
	NonKeyAttributes  []string
}

var DictionaryTableSchema = DynamoSchema{
	TableName: "{{.TableName}}",
	HashKey:   "{{.HashKey}}",
	RangeKey:  "{{.RangeKey}}",
	Attributes: []Attribute{
		{{- range .Attributes}}
		{Name: "{{.Name}}", Type: "{{.Type}}"},
		{{- end}}
	},
	SecondaryIndexes: []SecondaryIndex{
		{{- range .SecondaryIndexes}}
		{
			Name:           "{{.Name}}",
			HashKey:        "{{.HashKey}}",
			RangeKey:       "{{.RangeKey}}",
			ProjectionType: "{{.ProjectionType}}",
			{{- if .NonKeyAttributes}}
			NonKeyAttributes: []string{
				{{- range .NonKeyAttributes}}
				"{{.}}",
				{{- end}}
			},
			{{- end}}
		},
		{{- end}}
	},
}

type QueryBuilder struct {
	IndexName       string
	KeyCondition    expression.KeyConditionBuilder
	FilterCondition expression.ConditionBuilder
	UsedKeys        map[string]bool
}

func NewQueryBuilder() *QueryBuilder {
	return &QueryBuilder{
		UsedKeys: make(map[string]bool),
	}
}


{{range .Attributes}}
func (qb *QueryBuilder) With{{.Name | ToCamelCase}}({{.Name | ToLowerCamelCase}} {{if eq .Type "N"}}int{{else if eq .Type "B"}}bool{{else}}string{{end}}) *QueryBuilder {
	{{- $attrName := .Name}}
	{{- range $.SecondaryIndexes}}
	{{- if eq .HashKey $attrName}}
	if qb.IndexName == "" {
		qb.IndexName = Index{{.Name}}
		qb.KeyCondition = expression.Key("{{$attrName}}").Equal(expression.Value({{$attrName | ToLowerCamelCase}}))
		qb.UsedKeys["{{$attrName}}"] = true
		return qb
	}
	{{- end}}
	{{- end}}
	if !qb.UsedKeys["{{$attrName}}"] {
		if qb.FilterCondition.IsSet() {
			qb.FilterCondition = qb.FilterCondition.And(expression.Name("{{$attrName}}").Equal(expression.Value({{$attrName | ToLowerCamelCase}})))
		} else {
			qb.FilterCondition = expression.Name("{{$attrName}}").Equal(expression.Value({{$attrName | ToLowerCamelCase}}))
		}
	}
	return qb
}
{{end}}

func (qb *QueryBuilder) Build() (string, expression.KeyConditionBuilder, expression.ConditionBuilder) {
	return qb.IndexName, qb.KeyCondition, qb.FilterCondition
}

func boolToInt(b bool) int {
	if b {
		return 1
	}
	return 0
}
`

func main() {
	// Получаем путь к текущему файлу
	_, currentFile, _, ok := runtime.Caller(0)
	if !ok {
		fmt.Println("Unable to get the current file path")
		return
	}

	// Получаем директорию текущего файла
	currentDir := filepath.Dir(currentFile)

	// Строим абсолютный путь к JSON файлу
	jsonPath := filepath.Join(currentDir, "..", ".tmpl", "dynamo_dictionary_table.json")

	// Читаем JSON файл
	jsonFile, err := os.ReadFile(jsonPath)
	if err != nil {
		fmt.Printf("Error reading JSON file: %v\n", err)
		return
	}

	var schema DynamoSchema
	err = json.Unmarshal(jsonFile, &schema)
	if err != nil {
		fmt.Printf("Error unmarshaling JSON: %v\n", err)
		return
	}

	funcMap := template.FuncMap{
		"ToCamelCase":      toCamelCase,
		"ToLowerCamelCase": toLowerCamelCase,
	}

	tmpl, err := template.New("schema").Funcs(funcMap).Parse(codeTemplate)
	if err != nil {
		fmt.Printf("Error parsing template: %v\n", err)
		return
	}

	// Строим абсолютный путь к выходному файлу
	outputPath := filepath.Join(currentDir, "..", "dynamo_dictionary_table.go")

	outputFile, err := os.Create(outputPath)
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		return
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, schema)
	if err != nil {
		fmt.Printf("Error executing template: %v\n", err)
		return
	}
	fmt.Println("Schema code generated successfully!")
}

func toCamelCase(s string) string {
	parts := strings.Split(s, "_")
	for i := range parts {
		parts[i] = strings.Title(parts[i])
	}
	return strings.Join(parts, "")
}

func toLowerCamelCase(s string) string {
	s = toCamelCase(s)
	return strings.ToLower(s[:1]) + s[1:]
}
