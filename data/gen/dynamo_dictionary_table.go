package main

import (
	"encoding/json"
	"fmt"
	"os"
	"text/template"
)

type DynamoSchema struct {
	TableName        string           `json:"table_name"`
	HashKey          string           `json:"hash_key"`
	RangeKey         string           `json:"range_key"`
	Attributes       []Attribute      `json:"attributes"`
	SecondaryIndexes []SecondaryIndex `json:"secondary_indexes"`
}

type Attribute struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type SecondaryIndex struct {
	Name             string   `json:"name"`
	HashKey          string   `json:"hash_key"`
	RangeKey         string   `json:"range_key"`
	ProjectionType   string   `json:"projection_type"`
	NonKeyAttributes []string `json:"non_key_attributes,omitempty"`
}

const codeTemplate = `
// Code generated by dynamo_dictionary_table.go. DO NOT EDIT.

package data

type DynamoSchema struct {
	TableName        string
	HashKey          string
	RangeKey         string
	Attributes       []Attribute
	SecondaryIndexes []SecondaryIndex
}

type Attribute struct {
	Name string
	Type string
}

type SecondaryIndex struct {
	Name              string
	HashKey           string
	RangeKey          string
	ProjectionType    string
	NonKeyAttributes  []string
}

var DictionaryTableSchema = DynamoSchema{
	TableName: "{{.TableName}}",
	HashKey:   "{{.HashKey}}",
	RangeKey:  "{{.RangeKey}}",
	Attributes: []Attribute{
		{{- range .Attributes}}
		{Name: "{{.Name}}", Type: "{{.Type}}"},
		{{- end}}
	},
	SecondaryIndexes: []SecondaryIndex{
		{{- range .SecondaryIndexes}}
		{
			Name:           "{{.Name}}",
			HashKey:        "{{.HashKey}}",
			RangeKey:       "{{.RangeKey}}",
			ProjectionType: "{{.ProjectionType}}",
			{{- if .NonKeyAttributes}}
			NonKeyAttributes: []string{
				{{- range .NonKeyAttributes}}
				"{{.}}",
				{{- end}}
			},
			{{- end}}
		},
		{{- end}}
	},
}
`

func main() {
	jsonFile, err := os.ReadFile("../.tmpl/dynamo_dictionary_table.json")
	if err != nil {
		fmt.Printf("Error reading JSON file: %v\n", err)
		return
	}

	var schema DynamoSchema
	err = json.Unmarshal(jsonFile, &schema)
	if err != nil {
		fmt.Printf("Error unmarshaling JSON: %v\n", err)
		return
	}

	tmpl, err := template.New("schema").Parse(codeTemplate)
	if err != nil {
		fmt.Printf("Error parsing template: %v\n", err)
		return
	}

	outputFile, err := os.Create("../dynamo_dictionary_table.go")
	if err != nil {
		fmt.Printf("Error creating output file: %v\n", err)
		return
	}
	defer outputFile.Close()

	err = tmpl.Execute(outputFile, schema)
	if err != nil {
		fmt.Printf("Error executing template: %v\n", err)
		return
	}
	fmt.Println("Schema code generated successfully!")
}
