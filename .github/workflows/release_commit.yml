name: Release Commit

on:
  push:
    branches:
      - release/**

concurrency:
  group: release-commit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - name: Gather context
        id: vars
        run: |
          echo "ACTOR=${{ github.actor }}"  >> $GITHUB_ENV
          echo "MSG='${{ github.event.head_commit.message }}'" >> $GITHUB_ENV
          echo "SHA=${{ github.event.head_commit.id }}"  >> $GITHUB_ENV

      - name: Initial actor/message check
        id: check
        run: |
          if [[ "$ACTOR" == "web-flow" ]]; then
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # классические merge-коммиты
          if echo "$MSG" | grep -Eiq "merge pull request"; then
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # сквош-мерж из UI тоже имеет actor=web-flow, но если вдруг CLI-сквош:
          if echo "$MSG" | grep -Eiq "\(#[0-9]+\)"; then
            echo "proceed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # пока не решили — подготовим go дальше
          echo "proceed=maybe" >> $GITHUB_OUTPUT

      - name: Check via GitHub API if commit is in a PR
        if: steps.check.outputs.proceed == 'maybe'
        id: prcheck
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHA:         ${{ env.SHA }}
          REPO:        ${{ github.repository }}
        run: |
          prs=$(curl -s \
            -H "Accept: application/vnd.github.groot-preview+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/commits/$SHA/pulls)
          count=$(echo "$prs" | jq 'length')
          if [ "$count" -gt 0 ]; then
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

  terraform:
    needs: check-commit
    if: needs.check-commit.outputs.proceed == 'true'
    name: Tf
    uses: Mad-Pixels/github-workflows/.github/workflows/terraform-fmt.yml@main
    with:
      tf_dir: ./terraform

  golang:
    needs: check-commit
    if: needs.check-commit.outputs.proceed == 'true'
    name: GoLint
    runs-on: ubuntu-latest
    steps:
      - name: Run GoLint
        uses: Mad-Pixels/github-workflows/.github/actions/taskfile@main
        with:
          command: go/run/lint

  tests:
    needs: check-commit
    if: needs.check-commit.outputs.proceed == 'true'
    name: GoTest
    runs-on: ubuntu-latest
    steps:
      - name: Run Go Tests
        uses: Mad-Pixels/github-workflows/.github/actions/taskfile@main
        with:
          command: go/run/tests

  build:
    needs: [terraform, golang, tests]
    if: needs.check-commit.outputs.proceed == 'true'
    uses: ./.github/workflows/.build.yml
    name: build
    secrets:
      aws_secret_key:             ${{ secrets.AWS_SECRET_KEY_STG }}
      aws_access_key:             ${{ secrets.AWS_ACCESS_KEY_STG }}
      aws_region:                 ${{ secrets.AWS_REGION }}
      aws_account:                ${{ secrets.AWS_ACCOUNT_ID_STG }}

  apply:
    needs: [terraform, golang, tests]
    if: needs.check-commit.outputs.proceed == 'true'
    uses: ./.github/workflows/.terraform.yml
    name: Apply
    with:
      environment: "stg"
      tf_command: "apply"
    secrets:
      aws_secret_key:             ${{ secrets.AWS_SECRET_KEY_STG }}
      aws_access_key:             ${{ secrets.AWS_ACCESS_KEY_STG }}
      aws_region:                 ${{ secrets.AWS_REGION }}
      aws_backend_bucket:         ${{ secrets.AWS_BACKEND_BUCKET }}
      aws_backend_region:         ${{ secrets.AWS_BACKEND_REGION }}
      aws_backend_monitoring_key: ${{ secrets.AWS_BACKEND_MONITORING_KEY }}
      aws_backend_service_key:    ${{ secrets.AWS_BACKEND_SERVICE_KEY }}
      aws_backend_infra_key:      ${{ secrets.AWS_BACKEND_INFRA_KEY }}
      api_web_jwt_stg:            ${{ secrets.API_WEB_JWT_STG }}
      api_openai_key_stg:         ${{ secrets.API_OPENAI_KEY_STG }}
      api_device_key_stg:         ${{ secrets.API_DEVICE_KEY_STG }}

  rollout:
    needs: [apply, build]
    if: needs.check-commit.outputs.proceed == 'true'
    uses: ./.github/workflows/.rollout.yml
    name: Rollout
    secrets:
      aws_secret_key:             ${{ secrets.AWS_SECRET_KEY_STG }}
      aws_access_key:             ${{ secrets.AWS_ACCESS_KEY_STG }}
      aws_region:                 ${{ secrets.AWS_REGION }}
      aws_account:                ${{ secrets.AWS_ACCOUNT_ID_STG }}