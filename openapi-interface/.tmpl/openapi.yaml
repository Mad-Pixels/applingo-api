openapi: "3.0.1"
info:
  title: "${project}"
  description: "${project}-${name} endpoint"
  version: "1.0"

paths:
  /v1/reports:
    post:
      operationId: PostReportsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostReportsV1'
      responses:
        "200":
          description: "Report successfully logged"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_reports}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
        passthroughBehavior: "when_no_match"

  /v1/urls:
    post:
      operationId: PostUrlsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostUrlsV1'
      responses:
        "200":
          description: "Successfully generated presigned URL"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePostUrlsV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_urls}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
        passthroughBehavior: "when_no_match"

  /v1/dictionaries:
    get:
      operationId: GetDictionariesV1
      parameters:
        - $ref: '#/components/parameters/SortByParam'
        - $ref: '#/components/parameters/SubcategoryParam'
        - $ref: '#/components/parameters/LastEvaluatedParam'
        - $ref: '#/components/parameters/PublicParam'
      responses:
        "200":
          description: "Successfully retrieved dictionaries"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetDictionariesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    post:
      operationId: PostDictionariesV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostDictionariesV1'
      responses:
        "201":
          description: "Dictionary successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
        passthroughBehavior: "when_no_match"

  /v1/categories:
    get:
      operationId: GetCategoriesV1
      responses:
        "200":
          description: "Successfully retrieved categories"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetCategoriesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_categories}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
        passthroughBehavior: "when_no_match"

components:
  schemas:
    CategoryItemV1:
      type: object
      required:
        - code
      properties:
        code:
          type: string

    DictionaryItemV1:
      type: object
      required:
        - name
        - category
        - subcategory
        - author
        - dictionary
        - description
        - created_at
        - rating
        - public
      properties:
        name:
          type: string
        category:
          type: string
        subcategory:
          type: string
        author:
          type: string
        dictionary:
          type: string
        description:
          type: string
        created_at:
          type: integer
        rating:
          type: integer
        public:
          type: boolean

    CategoriesData:
      type: object
      required:
        - back_side
        - front_side
      properties:
        front_side:
          type: array
          items:
            $ref: '#/components/schemas/CategoryItemV1'
        back_side:
          type: array
          items:
            $ref: '#/components/schemas/CategoryItemV1'

    DictionariesData:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DictionaryItemV1'
        last_evaluated:
          type: string

    UrlsData:
      type: object
      required:
        - url
        - expires_in
      properties:
        url:
          type: string
          description: "Presigned URL"
        expires_in:
          type: integer
          description: "URL expiration time in seconds"

    MessageData:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: "ok"

    RequestPostDictionariesV1:
      type: object
      required:
        - description
        - filename
        - name
        - author
        - category
        - subcategory
        - public
      properties:
        description:
          type: string
        filename:
          type: string
        name:
          type: string
          minLength: 4
          maxLength: 32
        author:
          type: string
        category:
          type: string
        subcategory:
          type: string
        public:
          type: boolean

    RequestPostReportsV1:
      type: object
      required:
        - app_version
        - os_version
        - device
        - error_message
        - error_original
        - error_type
        - timestamp
        - replica_id
      properties:
        app_version:
          type: string
          description: "Application version"
        os_version:
          type: string
          description: "Operating system version"
        device:
          type: string
          description: "Device information"
        error_message:
          type: string
          description: "Error message"
        error_original:
          type: string
          description: "Original error"
        error_type:
          type: string
          description: "Type of error"
        timestamp:
          type: integer
          description: "Time when error occurred"
        replica_id:
          type: string
          description: "Replica identifier"
        additional_info:
          type: object
          additionalProperties: true
          description: "Additional error information"

    RequestPostUrlsV1:
      type: object
      required:
        - operation
        - identifier
      properties:
        operation:
          type: string
          enum:
            - upload
            - download
        content_type:
          type: string
          enum:
            - text/csv
            - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
            - application/vnd.ms-excel
        identifier:
          type: string
          minLength: 4
          maxLength: 32

    ResponseGetCategoriesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CategoriesData'

    ResponseGetDictionariesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/DictionariesData'

    ResponsePostUrlsV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/UrlsData'

    ResponseMessage:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MessageData'

  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string

    SortByParam:
      name: sort_by
      in: query
      schema:
        type: string
      description: "Sort criteria"

    SubcategoryParam:
      name: subcategory
      in: query
      schema:
        type: string
      description: "Filter by subcategory"

    LastEvaluatedParam:
      name: last_evaluated
      in: query
      schema:
        type: string
      description: "Pagination token"

    PublicParam:
      name: public
      in: query
      schema:
        type: boolean
      description: "Filter by public status"

x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:${region}:${account_id}:*/*"