openapi: "3.0.1"
info:
  title: "${project}"
  description: "${project}-${name} endpoint"
  version: "1.0"

paths:
  /v1/reports:
    post:
      operationId: PostReportsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostReportsV1'
      responses:
        "200":
          description: "Report successfully logged"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_reports}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/urls:
    post:
      operationId: PostUrlsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostUrlsV1'
      responses:
        "200":
          description: "Successfully generated presigned URL"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePostUrlsV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_urls}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/dictionaries:
    get:
      operationId: GetDictionariesV1
      parameters:
        - $ref: '#/components/parameters/ParamDictionariesSubcategory'
        - $ref: '#/components/parameters/ParamDictionariesLevel'
        - $ref: '#/components/parameters/ParamDictionariesSort'
        - $ref: '#/components/parameters/ParamLastEvaluated'
        - $ref: '#/components/parameters/ParamPublic'
      responses:
        "200":
          description: "Successfully retrieved dictionaries"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetDictionariesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    post:
      operationId: PostDictionariesV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostDictionariesV1'
      responses:
        "201":
          description: "Dictionary successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/subcategories:
    get:
      operationId: GetSubcategoriesV1
      parameters:
        - $ref: '#/components/parameters/ParamSubcategoriesSide'
      responses:
        "200":
          description: "Successfully retrieved subcategories"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetSubcategoriesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_subcategories}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    post:
      operationId: PostSubcategoriesV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostSubcategoriesV1'
      responses:
        "201":
          description: "Subcategory successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_subcategories}/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
  
  /v1/levels:
    get:
      operationId: GetLevelsV1
      responses:
        "200":
          description: "Successfully retrieved levels"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetLevelsV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_levels}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
  
components:
  headers:
    AccessControlAllowOrigin:
      description: "Specifies allowed origins for CORS requests"
      schema:
        type: string
        maxLength: 255
        pattern: "^\\*|https?://[\\w\\.-]+(?:\\.[\\w\\.-]+)*$"
      example: "*"
    AccessControlAllowMethods:
      description: "Specifies allowed HTTP methods for CORS requests"
      schema:
        type: string
        maxLength: 255
        pattern: "^(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD)(,(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD))*$"
      example: "GET,POST,DELETE,OPTIONS"
    AccessControlAllowHeaders:
      description: "Specifies allowed headers for CORS requests"
      schema:
        type: string
        maxLength: 1024
        pattern: "^[\\w\\-]+(?:,[\\w\\-]+)*$"
      example: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature"
    AccessControlAllowCredentials:
      description: "Indicates whether credentials are allowed for CORS requests"
      schema:
        type: string
        maxLength: 5
        pattern: "^(true|false)$"
      example: "true"

  schemas:

    #
    #
    # ITEMS 
    #
    #

    LevelItemV1:
      type: object
      required:
        - code
        - level
      properties:
        code: 
          type: string
          description: "Two-letter code"
          maxLength: 2
          minLength: 2
          pattern: "^[a-z]{2}$" 
        level:
          type: string
          description: "Proficiency level for the dictionary"
          maxLength: 64
          minLength: 1
          pattern: "^[A-z0-9_,\\.-]+$"
      additionalProperties: false

    SubcategoryItemV1:
      type: object
      required:
        - code
      properties:
        code: 
          type: string
          description: "Two-letter code"
          maxLength: 2
          minLength: 2
          pattern: "^[a-z]{2}$" 
        side: 
          type: string
          enum:
            - front
            - back
      additionalProperties: false

    DictionaryItemV1:
      type: object
      required:
        - name
        - category
        - subcategory
        - author
        - filename
        - description
        - created
        - rating
        - public
        - level
        - topic
      properties:
        name:
          type: string
          description: "Short name of the dictionary"
          minLength: 6
          maxLength: 32
          pattern: "^[A-z0-9_,\\.#-]+$"
        category:
          type: string
          description: "Main category for the dictionary"
          enum:
          - language
        subcategory:
          type: string
          description: "Language subcategory in ISO format"
          minLength: 5
          maxLength: 5
          pattern: "^[a-z]{2}-[a-z]{2}$"
        author:
          type: string
          description: "Name of the author of the dictionary"
          minLength: 2
          maxLength: 24
          pattern: "^[A-z0-9_,\\.-]+$"
        filename:
          type: string
          description: "Name of the file associated with the dictionary"
          minLength: 4
          maxLength: 256
          pattern: "^[A-z0-9_-]+(\\.[A-z0-9]+)?$"
        description:
          type: string
          description: "Description of the dictionary"
          minLength: 10
          maxLength: 256
        created:
          type: integer
          description: "Dictionary created date in UNIX format"
          format: int64
        rating:
          type: integer
          description: "Dictionary rating"
          format: int32
        public:
          type: boolean
          description: "Visibility of the dictionary"
        level:
          type: string
          description: "Proficiency level for the dictionary"
          maxLength: 2
          minLength: 2
          pattern: "^[a-z]{2}$"
        topic: 
          type: string
          description: "Specific topic covered in the dictionary"
          maxLength: 128
          minLength: 1
          pattern: "^[A-z0-9_,\\.-]+$"
      additionalProperties: false

    #
    #
    # Data
    #
    #

    CategoriesData:
      type: object
      required:
        - back_side
        - front_side
      properties:
        front_side:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryItemV1'
          maxItems: 100
        back_side:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryItemV1'
          maxItems: 100
      additionalProperties: false
    
    LevelsData:
      type: object
      required:
        - items
      properties:
        items: 
          type: array
          items:
            $ref: '#/components/schemas/LevelItemV1'
          maxItems: 6

    DictionariesData:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DictionaryItemV1'
          maxItems: 100
        last_evaluated:
          type: string
          description: "A token for pagination, encoded in Base64 format"
          format: base64
          maxLength: 1048576
          pattern: ^[A-Za-z0-9+/]*={0,2}$
      additionalProperties: false

    UrlsData:
      type: object
      required:
        - url
        - expires_in
      properties:
        url:
          type: string
          description: "A presigned URL that provides temporary access"
          format: uri
        expires_in:
          type: integer
          description: "Time in seconds until the URL expires"
      additionalProperties: false

    MessageData:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 128
          pattern: "^[a-z- ]+$"
          example: "message"
      additionalProperties: false

    #
    #
    # REQUEST 
    #
    #

    RequestPostSubcategoriesV1:
      type: object
      required:
        - side
        - code
        - description
      properties:
        side: 
          type: string
          description: "Specifies the side of the subcategory"
          enum:
            - front
            - back
        code: 
          type: string
          description: "Two-letter code"
          maxLength: 2
          minLength: 2
          pattern: "^[a-z]{2}$" 
        description:
          type: string
          description: "A brief description of the subcategory"
          minLength: 1
          maxLength: 64
          pattern: "^[A-z]+$"
      additionalProperties: false

    RequestPostDictionariesV1:
      type: object
      required:
        - description
        - filename
        - name
        - author
        - category
        - subcategory
        - public
        - level 
        - topic
      properties:
        description:
          type: string
          description: "Description of the dictionary"
          minLength: 10
          maxLength: 256
        filename:
          type: string
          description: "Name of the file associated with the dictionary"
          minLength: 4
          maxLength: 256
          pattern: "^[A-z0-9_-]+(\\.[A-z0-9]+)?$"
        name:
          type: string
          description: "Short name of the dictionary"
          minLength: 6
          maxLength: 32
          pattern: "^[A-z0-9_,\\.#-]+$"
        author:
          type: string
          description: "Name of the author of the dictionary"
          minLength: 2
          maxLength: 24
          pattern: "^[A-z0-9_,\\.-]+$"
        category:
          type: string
          description: "Main category for the dictionary"
          enum:
          - language
        subcategory:
          type: string
          description: "Language subcategory in ISO format"
          minLength: 5
          maxLength: 5
          pattern: "^[a-z]{2}-[a-z]{2}$"
        public:
          type: boolean
          description: "Visibility of the dictionary"
        level:
          type: string
          description: "Proficiency level for the dictionary"
          maxLength: 64
          minLength: 1
          pattern: "^[A-z0-9_,\\.-]+$"
        topic:
          type: string
          description: "Specific topic covered in the dictionary"
          maxLength: 128
          minLength: 1
          pattern: "^[A-z0-9_,\\.-]+$"
      additionalProperties: false

    RequestPostReportsV1:
      type: object
      required:
        - app_identifier
        - app_version
        - device_os
        - device_name
        - error_message
        - error_original
        - error_type
        - timestamp
      properties:
        app_identifier:
          type: string
          description: "Unique identifier for the app replica"
          maxLength: 36
          minLength: 36
          pattern: "^[A-f0-9-]{36}$"
        app_version:
          type: string
          description: "Application version"
          maxLength: 36
          minLength: 1
          pattern: "^[A-z0-9.-]+$" 
        device_os:
          type: string
          description: "Device operating system version"
          maxLength: 36
          minLength: 1
          pattern: "^[A-z0-9.-]+$" 
        device_name:
          type: string
          description: "Device model or name"
          maxLength: 64
          minLength: 1
          pattern: "^[A-z0-9.-]+$" 
        error_message:
          type: string
          description: "Description of the error"
          minLength: 1
          maxLength: 512
        error_original:
          type: string
          description: "Full original error information"
          minLength: 1
          maxLength: 1024
        error_type:
          type: string
          description: "Error type"
          minLength: 1
          maxLength: 64
          pattern: "^[A-z]+$" 
        timestamp:
          type: integer
          description: "Timestamp of the error occurrence in UNIX format"
          format: int64
        metadata:
          type: object
          description: "Optional metadata with additional context for the error report"
          additionalProperties: true
      additionalProperties: false

    RequestPostUrlsV1:
      type: object
      required:
        - operation
        - identifier
      properties:
        operation:
          type: string
          enum:
            - upload
            - download
          description: "Specifies the operation to perform"
        identifier:
          type: string
          minLength: 4
          maxLength: 64
          pattern: "^[A-z0-9_-]+(\\.[A-z0-9]+)?$"
          description: "A valid filename with an optional extension"
      additionalProperties: false

    #
    #
    # RESPONSE
    #
    #

    ResponseGetSubcategoriesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CategoriesData'
      additionalProperties: false
    
    ResponseGetLevelsV1:
      type: object
      required:
        - data 
      properties:
        data: 
          $ref: '#/components/schemas/LevelsData'
      additionalProperties: false

    ResponseGetDictionariesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/DictionariesData'
      additionalProperties: false

    ResponsePostUrlsV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/UrlsData'
      additionalProperties: false

    ResponseMessage:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MessageData'
      additionalProperties: false

  parameters:
    ParamDictionariesSort:
      name: sort_by
      in: query
      schema:
        type: string
        enum:
          - date
          - rating
      description: "Dictionaries sort criteria"

    ParamDictionariesSubcategory:
      name: subcategory
      in: query
      schema:
        type: string
        maxLength: 5
        minLength: 5
        pattern: "^[a-z]{2}-[a-z]{2}$" 
      description: "Dictionaries filter by subcategory"

    ParamDictionariesLevel:
      name: level
      in: query 
      schema: 
        type: string 
        maxLength: 2
        minLength: 2
        pattern: "^[a-z]{2}$"
      description: "Dictionaries filter by language level"

    ParamSubcategoriesSide:
      name: side 
      in: query 
      schema: 
        type: string
        enum:
          - front 
          - back
      description: "Subcategories filter by side"

    ParamLastEvaluated:
      name: last_evaluated
      in: query
      schema:
        type: string
      description: "Pagination token"

    ParamPublic:
      name: public
      in: query
      schema:
        type: boolean
      description: "Filter by public status"

x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:${region}:${account_id}:*/*"