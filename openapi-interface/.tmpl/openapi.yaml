openapi: "3.0.1"
info:
  title: "${project}"
  description: "${project}-${name} endpoint"
  version: "1.0"

paths:
  /v1/reports:
    post:
      operationId: PostReportsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostReportsV1'
      responses:
        "200":
          description: "Report successfully logged"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_reports}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/urls:
    post:
      operationId: PostUrlsV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostUrlsV1'
      responses:
        "200":
          description: "Successfully generated presigned URL"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePostUrlsV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_urls}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/dictionaries:
    get:
      operationId: GetDictionariesV1
      parameters:
        - $ref: '#/components/parameters/ParamDictionariesSubcategoryOptional'
        - $ref: '#/components/parameters/ParamDictionariesLevelOptional'
        - $ref: '#/components/parameters/ParamDictionariesSortEnum'
        - $ref: '#/components/parameters/ParamLastEvaluated'
        - $ref: '#/components/parameters/ParamPublic'
      responses:
        "200":
          description: "Successfully retrieved dictionaries"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetDictionariesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    post:
      operationId: PostDictionariesV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostDictionariesV1'
      responses:
        "201":
          description: "Dictionary successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    delete:
      operationId: DeleteDictionariesV1
      parameters: 
        - $ref: '#/components/parameters/ParamDictionariesNameRequired'
        - $ref: '#/components/parameters/ParamDictionariesAuthorRequired'
        - $ref: '#/components/parameters/ParamDictionariesSubcategoryRequired'
      responses:
        "200":
          description: "Successfully retrieved dictionaries"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetDictionariesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_dictionaries}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"

  /v1/subcategories:
    get:
      operationId: GetSubcategoriesV1
      parameters:
        - $ref: '#/components/parameters/ParamSubcategoriesSide'
      responses:
        "200":
          description: "Successfully retrieved subcategories"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetSubcategoriesV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_subcategories}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    post:
      operationId: PostSubcategoriesV1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPostSubcategoriesV1'
      responses:
        "201":
          description: "Subcategory successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_subcategories}/invocations"
        responses:
          default:
            statusCode: "201"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    delete:
      operationId: "DeleteSubcategoriesV1"
      parameters:
        - $ref: '#/components/parameters/ParamSubcategoriesSide' 
        - $ref: '#/components/parameters/ParamSubcategoriesCodeRequired'
      responses:
        "200":
          description: "Subcategory successfully deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_subcategories}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
  
  /v1/levels:
    get:
      operationId: GetLevelsV1
      responses:
        "200":
          description: "Successfully retrieved levels"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGetLevelsV1'
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${api_levels}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Access-Control-Allow-Credentials:
              $ref: '#/components/headers/AccessControlAllowCredentials'
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-timestamp,x-signature'"
  
components:
  headers:
    AccessControlAllowOrigin:
      schema:
        type: string
        example: "*"
    AccessControlAllowMethods:
      schema:
        type: string
        example: "GET,POST,DELETE,OPTIONS"
    AccessControlAllowHeaders:
      schema:
        type: string
        example: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token"
    AccessControlAllowCredentials:
      schema:
        type: string
        example: "true"

  schemas:

    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Base                                                                                                                #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

    BaseAuthorRequired:
      description: "Required author name"
      type: string
      minLength: 2
      maxLength: 24
      pattern: "^[a-zA-Z0-9_.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,alphanum,min=2,max=24"
    
    BaseAuthorOptional:
      description: "Optional author name"
      type: string
      minLength: 2
      maxLength: 24
      pattern: "^[a-zA-Z0-9_.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,alphanum,min=2,max=24"

    BaseDictNameRequired:
      description: "Required dictionary short name"
      type: string
      minLength: 6
      maxLength: 32
      pattern: "^[a-zA-Z0-9]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,alphanum,min=6,max=32"

    BaseDictNameOptional:
      description: "Optional dictionary short name"
      type: string
      minLength: 6
      maxLength: 32
      pattern: "^[a-zA-Z0-9]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,alphanum,min=6,max=32"

    BaseCodeRequired:
      description: "Required two-letter code"
      type: string
      minLength: 2
      maxLength: 2
      pattern: "^[a-zA-Z]{2}$"
      x-oapi-codegen-extra-tags:
        validate: "required,alpha,len=2,lowercase"

    BaseCodeOptional:
      description: "Optional two-letter code"
      type: string
      minLength: 2
      maxLength: 2
      pattern: "^[a-zA-Z]{2}$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,alpha,len=2,lowercase"
    
    BaseLevelRequired:
      description: "Required proficiency level"
      type: string
      minLength: 2
      maxLength: 2 
      pattern: "^[a-zA-Z][0-9]$"
      x-oapi-codegen-extra-tags:
        validate: "required,len=2"

    BaseLevelOptional:
      description: "Optional proficiency level"
      type: string
      minLength: 2
      maxLength: 2 
      pattern: "^[a-zA-Z][0-9]$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,len=2"

    BaseSubcategoryRequired:
      description: "Required language subcategory"
      type: string
      minLength: 5
      maxLength: 5
      pattern: "^[a-zA-Z]{2}-[a-zA-Z]{2}$"
      x-oapi-codegen-extra-tags:
        validate: "required,len=5"
    
    BaseSubcategoryOptional:
      description: "Optional language subcategory"
      type: string
      minLength: 5
      maxLength: 5
      pattern: "^[a-zA-Z]{2}-[a-zA-Z]{2}$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,len=5"

    BaseFilenameRequired:
      description: "Required filename"
      type: string
      minLength: 4
      maxLength: 128
      pattern: "^[a-zA-Z0-9-_.]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=4,max=128"

    BaseFilenameOptional:
      description: "Optional filename"
      type: string
      minLength: 4
      maxLength: 128
      pattern: "^[a-zA-Z0-9-_.]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=4,max=128"

    BaseDescriptionRequired:
      description: "Required description"
      type: string
      minLength: 1
      maxLength: 256
      pattern: "^[\\p{L}\\p{N}\\s,.!?-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=256"

    BaseDescriptionOptional:
      description: "Optional description"
      type: string
      minLength: 1
      maxLength: 256
      pattern: "^[\\p{L}\\p{N}\\s,.!?-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=256"

    BaseTopicRequired:
      description: "Required topic"
      type: string
      minLength: 1
      maxLength: 128
      pattern: "^[a-zA-Z0-9]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,alphanum,min=1,max=128"

    BaseTopicOptional:
      description: "Optional topic"
      type: string
      minLength: 1
      maxLength: 128
      pattern: "^[a-zA-Z0-9]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,alphanum,min=1,max=128"

    BaseMessageRequired:
      description: "Required message"
      type: string
      minLength: 1
      maxLength: 128
      pattern: "^[\\p{L}\\p{N}\\s-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=128"

    BaseMessageOptional:
      description: "Optional message"
      type: string
      minLength: 1
      maxLength: 128
      pattern: "^[\\p{L}\\p{N}\\s-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=128"

    BaseTimestampRequired:
      description: "Required timestamp in UNIX format"
      type: integer
      format: int64
      x-oapi-codegen-extra-tags:
        validate: "required"

    BaseTimestampOptional:
      description: "Optional timestamp in UNIX format"
      type: integer
      format: int64
      x-oapi-codegen-extra-tags:
        validate: "omitempty"

    BaseAppIdentifierRequired:
      description: "Required unique identifier for the app replica"
      type: string
      maxLength: 36
      minLength: 36
      pattern: "^[A-Fa-f0-9-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,len=36,hexadecimal"

    BaseAppIdentifierOptional:
      description: "Optional unique identifier for the app replica"
      type: string
      maxLength: 36
      minLength: 36
      pattern: "^[A-Fa-f0-9-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,len=36,hexadecimal"

    BaseAppVersionRequired:
      description: "Required application version"
      type: string
      maxLength: 36
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=36"

    BaseAppVersionOptional:
      description: "Optional application version"
      type: string
      maxLength: 36
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=36" 

    BaseDeviceOsRequired:
      description: "Required device operating system version"
      type: string
      maxLength: 36
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=36"
    
    BaseDeviceOsOptional:
      description: "Optional device operating system version"
      type: string
      maxLength: 36
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=36"
    
    BaseDeviceNameRequired:
      description: "Required device model or name"
      type: string
      maxLength: 48
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=48"

    BaseDeviceNameOptional:
      description: "Optional device model or name"
      type: string
      maxLength: 48
      minLength: 1
      pattern: "^[A-Za-z0-9.-]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=48"

    BaseErrorMessageRequired:
      description: "Required description of the error"
      type: string
      minLength: 1
      maxLength: 512
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=512"

    BaseErrorMessageOptional:
      description: "Optional description of the error"
      type: string
      minLength: 1
      maxLength: 512
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=512"

    BaseErrorOriginalRequired:
      description: "Required full original error information"
      type: string
      minLength: 1
      maxLength: 1024
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=1024"

    BaseErrorOriginalOptional:
      description: "Optional full original error information"
      type: string
      minLength: 1
      maxLength: 1024
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=1024"

    BaseErrorTypeRequired:
      description: "Required error type"
      type: string
      minLength: 1
      maxLength: 64
      pattern: "^[A-Za-z]+$"
      x-oapi-codegen-extra-tags:
        validate: "required,min=1,max=64,alpha"

    BaseErrorTypeOptional:
      description: "Optional error type"
      type: string
      minLength: 1
      maxLength: 64
      pattern: "^[A-Za-z]+$"
      x-oapi-codegen-extra-tags:
        validate: "omitempty,min=1,max=64,alpha"
    
    BaseUrlRequired:
      description: "Required url"
      type: string
      format: uri
      x-oapi-codegen-extra-tags:
        validate: "required" 

    BaseUrlOptional:
      description: "Optional url"
      type: string
      format: uri
      x-oapi-codegen-extra-tags:
        validate: "required" 

    BaseSideEnum:
      type: string
      description: "Specifies the side (front/back) of the subcategory"
      enum:
        - front
        - back
      
    BaseCategoryEnum:
      type: string
      description: "Main category for the dictionary"
      enum:
        - language
    
    BaseUrlOpEnum:
      type: string
      description: "Urls operations"
      enum:
        - upload
        - download
    
    BaseDictSortEnum:
      type: string
      description: "Dictionaries sort criteria"
      enum:
        - date
        - rating
        
    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Items                                                                                                               #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

    LevelItemV1:
      type: object
      required:
        - code
        - level
      properties:
        code:
          $ref: '#/components/schemas/BaseCodeRequired'
        level:
          $ref: '#/components/schemas/BaseLevelRequired'

    SubcategoryItemV1:
      type: object
      required:
        - code 
        - side
      properties:
        code: 
          $ref: '#/components/schemas/BaseCodeRequired'
        side: 
          $ref: '#/components/schemas/BaseSideEnum'

    DictionaryItemV1:
      type: object
      required:
        - name
        - category
        - subcategory
        - author
        - filename
        - description
        - created
        - rating
        - public
        - level
        - topic
      properties:
        name:
          $ref: '#/components/schemas/BaseDictNameRequired'
        subcategory:
          $ref: '#/components/schemas/BaseSubcategoryRequired'
        author:
          $ref: '#/components/schemas/BaseAuthorRequired'
        filename:
          $ref: '#/components/schemas/BaseFilenameRequired'
        description:
          $ref: '#/components/schemas/BaseDescriptionRequired'
        created:
          $ref: '#/components/schemas/BaseTimestampRequired'
        level:
          $ref: '#/components/schemas/BaseLevelRequired'
        topic: 
          $ref: '#/components/schemas/BaseTopicRequired'
        category:
          $ref: '#/components/schemas/BaseCategoryEnum'
        rating:
          type: integer
          description: "Dictionary rating"
          format: int32
        public:
          type: boolean
          description: "Visibility of the dictionary"

    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Data Response                                                                                                       #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

    CategoriesData:
      type: object
      required:
        - back_side
        - front_side
      properties:
        front_side:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryItemV1'
        back_side:
          type: array
          items:
            $ref: '#/components/schemas/SubcategoryItemV1'
    
    LevelsData:
      type: object
      required:
        - items
      properties:
        items: 
          type: array
          items:
            $ref: '#/components/schemas/LevelItemV1'

    DictionariesData:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DictionaryItemV1'
        last_evaluated:
          type: string
          description: "A token for pagination, encoded in Base64 format"
          format: base64
          maxLength: 1048576
          pattern: ^[A-Za-z0-9+/]*={0,2}$

    UrlsData:
      type: object
      required:
        - url
        - expires_in
      properties:
        url:
          $ref: '#/components/schemas/BaseUrlRequired'
        expires_in:
          type: integer
          description: "Time in seconds until the URL expires"

    MessageData:
      type: object
      required:
        - message
      properties:
        message:
          $ref: '#/components/schemas/BaseMessageRequired'

    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Data Request                                                                                                        #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

    RequestPostSubcategoriesV1:
      type: object
      required:
        - side
        - code
        - description
      properties:
        side: 
          $ref: '#/components/schemas/BaseSideEnum'
        code: 
          $ref: '#/components/schemas/BaseCodeRequired'
        description:
          $ref: '#/components/schemas/BaseMessageRequired'

    RequestPostDictionariesV1:
      type: object
      required:
        - description
        - filename
        - name
        - author
        - category
        - subcategory
        - public
        - level 
        - topic
      properties:
        description:
          $ref: '#/components/schemas/BaseDescriptionRequired'
        filename:
          $ref: '#/components/schemas/BaseFilenameRequired'
        name:
          $ref: '#/components/schemas/BaseDictNameRequired'
        author:
          $ref: '#/components/schemas/BaseAuthorRequired'
        subcategory:
          $ref: '#/components/schemas/BaseSubcategoryRequired'
        level:
          $ref: '#/components/schemas/BaseLevelRequired'
        topic:
          $ref: '#/components/schemas/BaseTopicRequired'
        category:
          $ref: '#/components/schemas/BaseCategoryEnum'
        public:
          type: boolean
          description: "Visibility of the dictionary"

    RequestPostReportsV1:
      type: object
      required:
        - app_identifier
        - app_version
        - device_os
        - device_name
        - error_message
        - error_original
        - error_type
        - timestamp
      properties:
        app_identifier:
          $ref: '#/components/schemas/BaseAppIdentifierRequired'
        app_version:
          $ref: '#/components/schemas/BaseAppVersionRequired'
        device_os:
          $ref: '#/components/schemas/BaseDeviceOsRequired'
        device_name:
          $ref: '#/components/schemas/BaseDeviceNameRequired'
        error_message:
          $ref: '#/components/schemas/BaseErrorMessageRequired' 
        error_original:
          $ref: '#/components/schemas/BaseErrorOriginalRequired' 
        error_type:
          $ref: '#/components/schemas/BaseErrorTypeRequired' 
        timestamp:
          $ref: '#/components/schemas/BaseTimestampRequired' 
        metadata:
          type: object
          description: "Optional metadata with additional context for the error report"

    RequestPostUrlsV1:
      type: object
      required:
        - operation
        - identifier
      properties:
        operation:
          $ref: '#/components/schemas/BaseUrlOpEnum'
        identifier:
          $ref: '#/components/schemas/BaseFilenameRequired'

    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Data Response                                                                                                       #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

    ResponseGetSubcategoriesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CategoriesData'
    
    ResponseGetLevelsV1:
      type: object
      required:
        - data 
      properties:
        data: 
          $ref: '#/components/schemas/LevelsData'

    ResponseGetDictionariesV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/DictionariesData'

    ResponsePostUrlsV1:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/UrlsData'

    ResponseMessage:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MessageData'

    # =================================================================================================================== #
    # ------------------------------------------------------------------------------------------------------------------- #
    # Query Parameters                                                                                                    #
    # ------------------------------------------------------------------------------------------------------------------- #
    # =================================================================================================================== #

  parameters:
    ParamDictionariesSortEnum:
      name: sort_by
      in: query
      schema:
        $ref: '#/components/schemas/BaseDictSortEnum'

    ParamSubcategoriesSide:
      name: side 
      in: query 
      schema: 
        $ref: '#/components/schemas/BaseSideEnum'

    ParamDictionariesSubcategoryRequired:
      name: subcategory
      in: query
      schema:
        $ref: '#/components/schemas/BaseSubcategoryRequired'

    ParamDictionariesSubcategoryOptional:
      name: subcategory
      in: query
      schema:
        $ref: '#/components/schemas/BaseSubcategoryOptional'
    
    ParamDictionariesNameRequired:
      name: name 
      in: query 
      schema: 
        $ref: '#/components/schemas/BaseDictNameRequired'

    ParamDictionariesNameOptional:
      name: name 
      in: query 
      schema: 
        $ref: '#/components/schemas/BaseDictNameOptional'
    
    ParamDictionariesAuthorRequired:
      name: author 
      in: query 
      schema:
        $ref: '#/components/schemas/BaseAuthorRequired'

    ParamDictionariesAuthorOptional:
      name: author 
      in: query 
      schema:
        $ref: '#/components/schemas/BaseAuthorOptional'

    ParamDictionariesLevelRequired:
      name: level
      in: query 
      schema: 
        $ref: '#/components/schemas/BaseLevelRequired'

    ParamDictionariesLevelOptional:
      name: level
      in: query 
      schema: 
        $ref: '#/components/schemas/BaseLevelOptional'

    ParamSubcategoriesCodeRequired:
      name: code 
      in: query
      schema: 
        $ref: '#/components/schemas/BaseCodeRequired'

    ParamSubcategoriesCodeOptional:
      name: code 
      in: query
      schema: 
        $ref: '#/components/schemas/BaseCodeOptional'
    
    ParamLastEvaluated:
      name: last_evaluated
      in: query
      schema:
        type: string

    ParamPublic:
      name: public
      in: query
      schema:
        type: boolean

x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:${region}:${account_id}:*/*"