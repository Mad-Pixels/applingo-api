package chatgpt

import (
	"github.com/Mad-Pixels/applingo-api/pkg/serializer"
	"github.com/pkg/errors"
)

var (
	// ErrEmptyResponse is returned when the API returns an empty response.
	ErrEmptyResponse = errors.New("empty response from API")
	// ErrEmptyModel is returned when the Request.Model field is empty.
	ErrEmptyModel = errors.New("model cannot be empty")
	// ErrEmptyContent is returned when the Request.Messages slice is empty.
	ErrEmptyContent = errors.New("content cannot be empty")
)

// Message represents a single message in the conversation.
type Message struct {
	Role    string `json:"role"`    // Role indicates the sender of the message (e.g., "user" or "assistant").
	Content string `json:"content"` // Content is the actual message text.
}

// Choice represents one of the possible completions generated by the API.
type Choice struct {
	Message      Message `json:"message"`       // Message contains the generated message details.
	FinishReason string  `json:"finish_reason"` // FinishReason indicates why the generation stopped.
}

// Usage provides details about the token usage in the API call.
type Usage struct {
	PromptTokens     int `json:"prompt_tokens"`     // PromptTokens is the number of tokens in the input prompt.
	CompletionTokens int `json:"completion_tokens"` // CompletionTokens is the number of tokens generated in the output.
	TotalTokens      int `json:"total_tokens"`      // TotalTokens is the sum of prompt and completion tokens.
}

// Request represents the payload sent to the ChatGPT API.
type Request struct {
	Model       string    `json:"model"`       // Model specifies the ChatGPT model to be used.
	Messages    []Message `json:"messages"`    // Messages contains the conversation history.
	Temperature float64   `json:"temperature"` // Temperature controls the randomness of the output.
}

// Validate checks whether the Request contains all required fields.
// It returns an error if any required field is missing.
func (r *Request) Validate() error {
	if r.Model == "" {
		return ErrEmptyModel
	}
	if len(r.Messages) == 0 {
		return ErrEmptyContent
	}
	return nil
}

// Marshal converts the Request into its JSON representation.
func (r *Request) Marshal() ([]byte, error) {
	return serializer.MarshalJSON(r)
}

// Response represents the structure of the response received from the ChatGPT API.
type Response struct {
	ID      string   `json:"id"`      // ID is the unique identifier of the response.
	Object  string   `json:"object"`  // Object type (usually "chat.completion").
	Created int64    `json:"created"` // Created timestamp (in Unix time).
	Model   string   `json:"model"`   // Model used to generate the response.
	Choices []Choice `json:"choices"` // Choices contains the list of generated completions.
	Usage   Usage    `json:"usage"`   // Usage provides token usage information.
}

// Unmarshal parses the JSON-encoded data and stores the result in the Response struct.
func (r *Response) Unmarshal(data []byte) error {
	return serializer.UnmarshalJSON(data, r)
}
