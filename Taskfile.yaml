version: "3"

vars:
  git_root:
    sh: git rev-parse --show-toplevel
  go_root:
    sh: go env GOPATH
  go_version:
    sh: grep '^go ' ./go.mod | awk '{print $2}'
  go_lint:     v1.60.3
  go_imports:  latest
  go_fumpt:    latest
  go_outdated: latest
  project: lingocards-api

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

  go/mod/vendor:
    desc: Run 'go mod vendor'.
    dir: "{{ .git_root }}"
    cmds:
      - |
        if [ -d "{{ .git_root }}/vendor" ]; then
          cd {{ .git_root }} && go mod tidy
        else 
          cd {{ .git_root }} && go mod tidy && go mod vendor
        fi
    internal: true
    silent: true

  go/install/lint:
    desc: Install 'golangci-lint'.
    cmds:
      - cmd: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{ .go_root }}/bin {{ .golint_version }}
      - "{{ .go_root }}/bin/golangci-lint version"
    sources:
      - "{{ .go_root }}/bin/golangci-lint"
    internal: true
    silent: true
  
  go/run/lint:
    desc: Run 'golangci-lint'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/lint
    cmds: 
      - "{{ .go_root }}/bin/golangci-lint run cmd/... -v --timeout=15m"
  
  go/install/fumpt:
    desc: Install 'gofumpt'.
    cmd: go install mvdan.cc/gofumpt@{{ .go_fumpt }}
    internal: true
    silent: true
    
  go/run/fumpt:
    desc: Run 'gofumpt'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/fumpt
    cmd: gofumpt -l -w .
    silent: true

  go/install/imports:
    desc: Install 'goimports'.
    cmd: go install golang.org/x/tools/cmd/goimports@{{ .go_imports }}
    internal: true
    silent: true

  go/run/imports:
    desc: Run 'goimports'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/imports
    cmd: goimports -w $(find {{ .git_root }} -type f -name '*.go' -not -path "{{ .git_root }}/vendor/*")
    silent: true

  go/install/outdated:
    desc: Install 'go-mod-outdated'.
    deps: 
      - go/mod/vendor
    cmd: go install github.com/psampaz/go-mod-outdated@{{ .go_outdated }}
    internal: true
    silent: true

  go/run/outdated:
    desc: Run 'outdated'
    dir: "{{ .git_root }}"
    deps:
      - go/install/outdated
    cmd: go list -mod=mod -u -m -json all | go-mod-outdated -update -direct
    silent: true

  docker/build/func:
    desc: Run 'docker build' for 'FUNC=...' argument.
    dir: "{{ .git_root }}"
    deps:
      - go/mod/vendor
    vars:
      FUNC_NAME: '{{ .FUNC }}'
    cmds:
      - docker build -t {{ .project }}/{{ .FUNC_NAME }}:latest --build-arg FUNC_NAME={{ .FUNC_NAME }} .
    silent: true
  
  docker/build/all:
    desc: Run 'docker build' for all funcs.
    dir: "{{ .git_root }}"
    cmds:
      - |
        for dir in {{ .git_root }}/cmd/*; do
          if [ -d "$dir" ]; then
            func=$(basename "$dir")
            echo "Building $func"
            task docker/build/func FUNC=$func
          fi
        done
    silent: true

  terraform/init/localstack:
    desc: Initialize Terraform for LocalStack
    dir: "{{ .git_root }}/terraform"
    cmds:
      - terraform init -reconfigure -backend-config=localstack.tfbackend
    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1

  terraform/init/aws:
    desc: Initialize Terraform for AWS
    dir: "{{ .git_root }}/terraform"
    cmds:
      - terraform init -backend-config=aws.tfbackend

  localstack/start:
    desc: Start LocalStack
    cmds:
      - |
        if docker ps | grep -q localstack; then
          echo "LocalStack is already running."
        else
          echo "Starting LocalStack..."
          docker run -d --name localstack \
            localstack/localstack-pro
          echo "Waiting for LocalStack to be ready..."
          until curl -s http://localhost:4566 > /dev/null; do
            sleep 1
          done
          echo "LocalStack is ready!"
        fi
    silent: false

  localstack/stop:
    desc: Stop LocalStack
    cmds:
      - docker stop localstack
      - docker rm localstack
    silent: false

  localstack/create-s3-bucket:
    desc: Create S3 bucket in LocalStack
    cmds:
      - |
        aws --endpoint-url=http://localhost:4566 s3 mb s3://terraform-state
    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1

  localstack/deploy:
    desc: Deploy to LocalStack
    dir: "{{ .git_root }}/terraform"
    cmds:
      - task: terraform/init/localstack
      - |
        terraform plan -var="use_localstack=true" -var="region=us-east-1" -var="localstack_endpoint=http://localhost:4566" -out=tfplan
        terraform apply -auto-approve tfplan
    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
    silent: false
  
  aws/deploy:
    desc: Deploy to AWS
    deps: [docker/build/all]
    dir: "{{ .git_root }}/terraform"
    cmds:
      - task: terraform/init/aws
      - |
        terraform plan
        terraform apply -auto-approve
    silent: false

  