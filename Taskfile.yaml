version: "3"

vars:
  git_root:
    sh: git rev-parse --show-toplevel
  go_root:
    sh: go env GOPATH
  go_version:
    sh: grep '^go ' ./go.mod | awk '{print $2}'
  go_lint:     v1.60.3
  go_imports:  latest
  go_fumpt:    latest
  go_outdated: latest
  repository_name: lingocards-api
  localstack_ecr_url: "000000000000.dkr.ecr.us-east-1.localhost.localstack.cloud:4566"

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

  go/mod/vendor:
    desc: Run 'go mod vendor'.
    dir: "{{ .git_root }}"
    cmds:
      - |
        if [ -d "{{ .git_root }}/vendor" ]; then
          cd {{ .git_root }} && go mod tidy
        else 
          cd {{ .git_root }} && go mod tidy && go mod vendor
        fi
    internal: true
    silent: true

  go/install/lint:
    desc: Install 'golangci-lint'.
    cmds:
      - cmd: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{ .go_root }}/bin {{ .golint_version }}
      - "{{ .go_root }}/bin/golangci-lint version"
    sources:
      - "{{ .go_root }}/bin/golangci-lint"
    internal: true
    silent: true
  
  go/run/lint:
    desc: Run 'golangci-lint'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/lint
    cmds: 
      - "{{ .go_root }}/bin/golangci-lint run cmd/... -v --timeout=15m"
  
  go/install/fumpt:
    desc: Install 'gofumpt'.
    cmd: go install mvdan.cc/gofumpt@{{ .go_fumpt }}
    internal: true
    silent: true
    
  go/run/fumpt:
    desc: Run 'gofumpt'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/fumpt
    cmd: gofumpt -l -w .
    silent: true

  go/install/imports:
    desc: Install 'goimports'.
    cmd: go install golang.org/x/tools/cmd/goimports@{{ .go_imports }}
    internal: true
    silent: true

  go/run/imports:
    desc: Run 'goimports'.
    dir: "{{ .git_root }}"
    deps:
      - go/install/imports
    cmd: goimports -w $(find {{ .git_root }} -type f -name '*.go' -not -path "{{ .git_root }}/vendor/*")
    silent: true

  go/install/outdated:
    desc: Install 'go-mod-outdated'.
    deps: 
      - go/mod/vendor
    cmd: go install github.com/psampaz/go-mod-outdated@{{ .go_outdated }}
    internal: true
    silent: true

  go/run/outdated:
    desc: Run 'outdated'
    dir: "{{ .git_root }}"
    deps:
      - go/install/outdated
    cmd: go list -mod=mod -u -m -json all | go-mod-outdated -update -direct
    silent: true

  docker/build/func:
    desc: Run 'docker build' for 'FUNC=...' argument.
    dir: "{{ .git_root }}"
    deps:
      - go/mod/vendor
    vars:
      FUNC_NAME: '{{ .FUNC }}'
    cmds:
      - docker build -t {{ .repository_name }}:{{ .FUNC_NAME }} --build-arg FUNC_NAME={{ .FUNC_NAME }} .
    silent: true
  
  docker/build/all:
    desc: Run 'docker build' for all funcs.
    dir: "{{ .git_root }}"
    cmds:
      - |
        for dir in {{ .git_root }}/cmd/*; do
          if [ -d "$dir" ]; then
            func=$(basename "$dir")
            echo "Building $func"
            task docker/build/func FUNC=$func
          fi
        done
    silent: true
  
  docker/push/func:
    desc: Push image to repository.
    vars:
      REPO_URL: '{{ .REPO_URL }}'
    cmds:
      - |
        if [ -z "{{ .REPO_URL }}" ]; then
          echo "Error: REPO_URL is not set"
          exit 1
        fi
        if [ -z "{{ .TAG }}" ]; then
          echo "Error: TAG is not set"
          exit 1
        fi
      - docker image tag {{ .repository_name }}:{{ .TAG }} {{ .REPO_URL }}/{{ .repository_name }}:{{ .TAG }}
      - docker push {{ .REPO_URL }}/{{ .repository_name }}:{{ .TAG }}
    silent: true

  docker/push/all:
    desc: Push all images to repository.
    vars:
      REPO_URL: '{{ .REPO_URL }}'
    cmds:
      - |
        if [ -z "{{.REPO_URL}}" ]; then
          echo "Error: REPO_URL is not set"
          exit 1
        fi
        for tag in $(docker images --format '{{`{{.Repository}}:{{.Tag}}`}}' | grep "^{{.repository_name}}:"); do
          task docker/push/func TAG=${tag#*:} REPO_URL={{.REPO_URL}}
        done
    silent: true

  terraform/init:
    desc: Run 'terraform init'.
    dir: "{{ .DIR }}"
    cmds:
      - |
        if [ -z "{{ .KEY_ID }}" ]; then
          echo "Error: KEY_ID is not set"
          exit 1
        fi
        if [ -z "{{ .ACCESS_KEY }}" ]; then
          echo "Error: ACCESS_KEY is not set"
          exit 1
        fi
        if [ -z "{{ .REGION }}" ]; then
          echo "Error: REGION is not set"
          exit 1
        fi
        terraform init -reconfigure
    env:
      AWS_DEFAULT_REGION:    '{{ .REGION }}'
      AWS_ACCESS_KEY_ID:     '{{ .KEY_ID }}'
      AWS_SECRET_ACCESS_KEY: '{{ .ACCESS_KEY }}'
    silent: true
    internal: true

  terraform/plan:
    desc: Run 'terraform plan'.
    dir: "{{ .DIR }}"
    cmds:
      - |
        if [ -z "{{ .LOCALSTACK }}" ]; then
          echo "Error: LOCALSTACK is not set"
          exit 1
        fi
        if [ -z "{{ .REGION }}" ]; then
          echo "Error: REGION is not set"
          exit 1
        fi
        terraform plan -var="use_localstack={{ .LOCALSTACK }}" -var="aws_region={{ .REGION }}"
    env:
      AWS_DEFAULT_REGION:    '{{ .REGION }}'
      AWS_ACCESS_KEY_ID:     '{{ .KEY_ID }}'
      AWS_SECRET_ACCESS_KEY: '{{ .ACCESS_KEY }}'
    silent: true
    internal: true

  terraform/apply:
    desc: Run 'terraform apply'.
    dir: "{{ .DIR }}"
    cmds:
      - |
        if [ -z "{{ .LOCALSTACK }}" ]; then
          echo "Error: LOCALSTACK is not set"
          exit 1
        fi
        if [ -z "{{ .REGION }}" ]; then
          echo "Error: REGION is not set"
          exit 1
        fi
        terraform apply --auto-approve -var="use_localstack={{ .LOCALSTACK }}" -var="aws_region={{ .REGION }}"
    env:
      AWS_DEFAULT_REGION:    '{{ .REGION }}'
      AWS_ACCESS_KEY_ID:     '{{ .KEY_ID }}'
      AWS_SECRET_ACCESS_KEY: '{{ .ACCESS_KEY }}'
    silent: true
    internal: true

  env/localstack/start:
    desc: Run localstack environment.
    cmds:
      - |
        if [ -z "$LOCALSTACK_AUTH_TOKEN" ]; then
          echo "Error: LOCALSTACK_AUTH_TOKEN is not set. Please set this environment variable before running LocalStack."
          exit 1
        fi
      - localstack start -d
      - task: terraform/init
        vars: 
          DIR:        "{{ .git_root }}/terraform/provisioners/infra"
          REGION:     us-east-1
          KEY_ID:     test
          ACCESS_KEY: test
      - task: terraform/apply
        vars:
          DIR:        "{{ .git_root }}/terraform/provisioners/infra"
          REGION:     us-east-1
          LOCALSTACK: "true"
          KEY_ID:     test
          ACCESS_KEY: test
      - task: docker/build/all
      - task: docker/push/all
        vars:
          REPO_URL: '{{ .localstack_ecr_url }}'
    silent: true

  env/localstack/stop:
    desc: Remove localstack environment.
    cmds:
      - |
        docker stop $(docker ps)
        docker rm $(docker ps -qa)
    silent: true
