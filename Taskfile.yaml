version: "3"

vars:
  git_root:
    sh: git rev-parse --show-toplevel
  go_root:
    sh: go env GOPATH
  go_version:
    sh: grep '^go ' ./go.mod | awk '{print $2}'
  
  go_imports: latest
  go_fumpt: latest
  go_lint: v2.1.2

  terraform: 1.9.5
  terraform_docs: v0.18.0

  api_image_name: applingo-images

tasks:
  default:
    desc: Default task.
    cmds:
      - echo "Please enter a task or use '-l' or '--list-all' to list all available tasks"
    silent: true

  # =================================================
  # ---------------------INTERNAL-------------------#
  # =================================================

  _go/version/check:
    desc: Check actual golang version.
    dir: "{{.git_root}}"
    cmds:
      - |
        required_version="{{.go_version}}"
        current_version=$(go version | awk '{print $3}' | sed 's/go//')
        
        version_compare() {
          if [ "$(echo -e "$1\n$2" | sort -V | head -n1)" = "$1" ]; then
            return 0
          else
            return 1
          fi
        }
        if ! version_compare "$required_version" "$current_version"; then
          echo "Error: Go version $required_version or higher is required, but you have $current_version"
          exit 1
        fi
    silent: true
    internal: true

  _go/install/lint:
    desc: Install 'golangci-lint'.
    deps:
      - _go/version/check
    cmds:
      - cmd: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b {{.go_root}}/bin {{.golint_version}}
      - "{{.go_root}}/bin/golangci-lint version"
    sources:
      - "{{.go_root}}/bin/golangci-lint"
    internal: true
    silent: true

  _go/install/fumpt:
    desc: Install 'gofumpt'.
    deps:
      - _go/version/check
    cmd: go install mvdan.cc/gofumpt@{{.go_fumpt}}
    internal: true
    silent: true

  _go/install/oapi-codegen:
    desc: Install oapi
    deps:
      - _go/version/check
    cmds:
      - go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest
    sources:
      - "{{.go_root}}/bin/oapi-codegen"
    internal: true
    silent: true

  _docker/build/all:
    desc: Run 'docker build' for all funcs.
    dir: "{{.git_root}}"
    deps:
      - go/mod/vendor
    cmds:
      - |
        for dir in {{.git_root}}/cmd/*; do
          if [ -d "$dir" ]; then
            task docker/build/func FUNC=$(basename "$dir")
          fi
        done
    silent: true
    internal: true
  
  _docker/push/all:
    desc: Run 'docker oush' for all funcs. 
    vars:
      REPO_URL: '{{.REPO_URL}}'
    cmds:
      - |
        if [ -z "{{.REPO_URL}}" ]; then
          echo "Error: REPO_URL is not set"
          exit 1
        fi
        for f in {{.git_root}}/cmd/*; do
          if [ -d "$f" ]; then
            func=$(basename "$f")
            image="{{.api_image_name}}:$func"

            if docker image inspect "${image}" >/dev/null 2>&1; then
              echo "Pushing ${image} to {{.REPO_URL}}"
              docker image tag "${image}" "{{.REPO_URL}}/${image}"
              docker push "{{.REPO_URL}}/${image}"
            fi
          fi
        done
    env:
      AWS_DEFAULT_REGION:    us-east-1
      AWS_ACCESS_KEY_ID:     test
      AWS_SECRET_ACCESS_KEY: test
    silent: true
    internal: true

  _terraform/install:
    desc: Install 'terraform'.
    cmds:
      - curl -sL https://releases.hashicorp.com/terraform/{{.terraform}}/terraform_{{.terraform}}_{{OS}}_{{ARCH}}.zip -o /tmp/terraform.zip
      - sudo unzip -o /tmp/terraform.zip -d /usr/local/bin/
      - sudo chmod a+x /usr/local/bin/terraform
      - terraform version
    sources:
      - /usr/local/bin/terraform
    silent: true
    internal: true

  _terraform/apply:
    desc: Apply terraform to localstack
    dir: "{{.DIR}}"
    deps:
      - _terraform/install
    cmds:
      - |
        cat << EOF > backend.tf
        terraform {
          backend "local" {}
        }
        EOF

        terraform init -reconfigure
        terraform apply -input=false -auto-approve {{.TF_VARS}}
    silent: true
    internal: true

  _terraform/docs/install:
    desc: Install 'terraform docs'
    cmds:
      - curl -sL https://terraform-docs.io/dl/{{.terraform_docs}}/terraform-docs-{{.terraform_docs}}-{{OS}}-{{ARCH}}.tar.gz -o /tmp/terraform-docs.tar.gz
      - sudo tar -C /tmp -xzf /tmp/terraform-docs.tar.gz
      - sudo chmod a+x /tmp/terraform-docs
      - sudo mv /tmp/terraform-docs /usr/local/bin
      - terraform-docs version
    sources:
      - /usr/local/bin/terraform-docs
    silent: true
    internal: true

  _localstack/install:
    desc: Install "localstack".
    cmds:
      - python3 -m venv {{.HOME}}/.pyenv
      - ~/.pyenv/bin/python3 -m pip install localstack
    sources:
      - "{{.HOME}}/.pyenv/bin/localstack"
    silent: true
    internal: true

  # =================================================
  # ----------------------PUBLIC--------------------#
  # =================================================

  go/generate/dynamo:
    desc: Run DynamoDB codegen from ./dynamodb-interface/.tmpl
    dir: "{{.git_root}}/dynamodb-interface"
    cmds:
      - go run main.go
    silent: true

  go/generate/openapispec:
    desc: Run OpenAPI spec generation process
    dir: "{{.git_root}}/openapi-interface/spec"
    cmds:
      - go run main.go
    silent: true

  go/generate/openapi:
    desc: Generate GoLang models from openapi.yml
    deps:
      - _go/install/oapi-codegen
    dir: "{{.git_root}}/openapi-interface"
    cmds:
      - mkdir -p ./gen/applingoapi
      - oapi-codegen -generate types -o ./gen/applingoapi/applingoapi.go -package applingoapi ./.tmpl/openapi.yaml
    silent: true

  go/mod/vendor:
    desc: Run 'go mod vendor'.
    dir: "{{.git_root}}"
    deps:
      - _go/version/check
      - go/generate/dynamo
      - go/generate/openapi
      - go/generate/openapispec
    cmds:
      - |
        if [ -d "{{.git_root}}/vendor" ]; then
          cd {{.git_root}} && go mod tidy
        else 
          cd {{.git_root}} && go mod tidy && go mod vendor
        fi
    silent: true

  go/run/lint:
    desc: Run 'golangci-lint'.
    dir: "{{.git_root}}"
    deps:
      - _go/install/lint
      - go/mod/vendor 
    cmds: 
      - "{{.go_root}}/bin/golangci-lint run cmd/... -v --timeout=15m"
  
  go/run/fumpt:
    desc: Run 'gofumpt'.
    dir: "{{.git_root}}"
    deps:
      - _go/install/fumpt
    cmd: gofumpt -l -w .
    silent: true

  go/run/tests:
    desc: Tests 
    dir: "{{ .git_root }}" 
    cmd: echo "Hello"
    silent: true

  docker/build/func:
    desc: Build single-function image
    dir: "{{.git_root}}"
    deps:
      - go/mod/vendor
    vars:
      FUNC_NAME: '{{ .FUNC }}'
      IMAGE_ARCH: '{{ .ARCH | default ARCH }}'
    cmds:
      - docker buildx create --name applingo-builder --driver docker-container --use || true
      - |
        docker buildx build \
          --builder applingo-builder \
          --platform linux/{{.IMAGE_ARCH}} \
          -t {{.api_image_name}}:{{.FUNC_NAME}} \
          --build-arg FUNC_NAME={{.FUNC_NAME}} \
          --build-arg GO_VERSION={{.go_version}} \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --load .
    silent: true

  terraform/fmt/fix:
    desc: Run 'terraform fix fmt'.
    dir: "{{.git_root}}/terraform"
    deps:
      - _terraform/install
    cmd: terraform fmt -recursive --diff --write=true
    silent: true

  terraform/docs/run:
    desc: Run 'terraform docs'
    deps:
      - _terraform/docs/install
    cmds:
      - |
        modules=$(find {{.git_root}}/terraform/modules/* {{.git_root}}/terraform/provisioners/* -maxdepth 0 -type d)
        for m in $modules; do
          terraform-docs markdown table --output-file README.md --output-mode inject $m
        done
    silent: true

  api/swagger/run:
    desc: Run Swagger
    cmds:
      - echo "Running on http://localhost:18080"
      - |
        docker run -p 18080:8080 \
        -e SWAGGER_JSON=/api/openapi.yaml \
        -v {{.git_root}}/openapi-interface/.tmpl/openapi.yaml:/api/openapi.yaml \
        swaggerapi/swagger-ui
    silent: true

  api/localstack/run:
    desc: Run localstack environment.
    deps:
      - _localstack/install
    cmds:
      - |
        if [ -z "$LOCALSTACK_AUTH_TOKEN" ]; then
          echo "Error: LOCALSTACK_AUTH_TOKEN is not set. Please set this environment variable before running LocalStack."
          exit 1
        fi
      - "{{.HOME}}/.pyenv/bin/localstack start -d"
      - task: _terraform/apply
        vars:
          DIR: "{{.git_root}}/terraform/provisioners/infra"
          TF_VARS: |
            -var="aws_region=us-east-1" \
            -var="use_localstack=true"  \
            -var="environment=dev" 
      - task: _docker/build/all
      - task: _docker/push/all
        vars:
          REPO_URL: "000000000000.dkr.ecr.us-east-1.localhost.localstack.cloud:4566"
      - task: _terraform/apply 
        vars:
          DIR: "{{.git_root}}/terraform/provisioners/service"
          TF_VARS: |
            -var="aws_region=us-east-1"           \
            -var="use_localstack=true"            \
            -var="environment=dev"                \
            -var="infra_backend_bucket=test"      \
            -var="infra_backend_region=us-east-1" \
            -var="infra_backend_key=test"         \
            -var="device_api_token=000XXX000"     \
            -var="jwt_secret=yHc8vF9dxJzZP@!"     \
            -var="openai_key=sk-proj"
    silent: true

  api/localstack/stop:
    desc: Remove localstack environment.
    cmds:
      - docker stop $(docker ps -q --filter name=localstack) 
      - docker rm $(docker ps -aq --filter name=localstack) || true
    silent: true
