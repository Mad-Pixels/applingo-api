openapi: "3.0.1"
info:
  title: "${project}"
  description: "${project}-${name} endpoint"
  version: "1.0"
paths:
  /device/v1/category/{action}:
    get:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string" 
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_data:
                    type: string
                    description: "The category data retrieved" 
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "${invoke_lambdas_arns["category_query"].arn}"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
      security:
        - DeviceAuthorizer: []

  /device/v1/dictionary/{action}:
    post:
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
        - name: anyParameter
          in: query
          required: false
          schema:
            type: object
          description: Any additional query parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "${invoke_lambdas_arns["dictionary_query"].arn}"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
      security:
        - DeviceAuthorizer: []

  /api/v1/category/{action}:
    get:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_data:
                    type: string
                    description: "The category data retrieved"
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "${invoke_lambdas_arns["category_query"].arn}"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

  /api/v1/dictionary/{action}:
    post:
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
        - name: anyParameter
          in: query
          required: false
          schema:
            type: object
          description: Any additional query parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "${invoke_lambdas_arns["dictionary_query"].arn}"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"
    
  /api/v1/dictionary/manage/{action}:
    post:
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
        - name: anyParameter
          in: query
          required: false
          schema:
            type: object
          description: Any additional query parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "Bad Request"
        "500":
          description: "Internal Server Error"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "${invoke_lambdas_arns["dictionary_manage"].arn}"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "aws_proxy"

    options:
      responses:
        "200":
          description: "CORS support"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
            Access-Control-Allow-Credentials:
              schema:
                type: "string"
          content: {}
      x-amazon-apigateway-integration:
        type: "mock"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        passthroughBehavior: "when_no_match"

components:
  securitySchemes:
    DeviceAuthorizer:
      type: "apiKey"
      name: "X-Timestamp"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        type: "request"
        authorizerUri: "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${invoke_lambdas_arns["authorizer_device"].arn}/invocations"
        identitySource:
          - "method.request.header.X-Timestamp"
          - "method.request.header.X-Signature"
        authorizerResultTtlInSeconds: 5

x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    statusCode: 200
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:${region}:${account_id}:*/*"
